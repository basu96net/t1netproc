/*
 * temp.cpp
 *
 *  Created on: Nov 27, 2017
 *      Author: mono
 */


`
#include <vector>
#include<cstring>

#include "pcap.h"
#include <stdio.h>

#include <socketapi.h>
#include <Winsock2.h>

#include <fstream>
#include <iostream>



/* 4 bytes IP address */
typedef struct ip_address {
	u_char byte1;
	u_char byte2;
	u_char byte3;
	u_char byte4;
}ip_address;

/* IPv4 header */
typedef struct ip_header {
	u_char  ver_ihl;        // Version (4 bits) + Internet header length (4 bits)
	u_char  tos;            // Type of service
	u_short tlen;           // Total length
	u_short identification; // Identification
	u_short flags_fo;       // Flags (3 bits) + Fragment offset (13 bits)
	u_char  ttl;            // Time to live
	u_char  proto;          // Protocol
	u_short crc;            // Header checksum
	ip_address  saddr;      // Source address
	ip_address  daddr;      // Destination address
	u_int   op_pad;         // Option + Padding
}ip_header;

/* UDP header*/
typedef struct udp_header {
	u_short sport;          // Source port
	u_short dport;          // Destination port
	u_short len;            // Datagram length
	u_short crc;            // Checksum
}udp_header;

typedef struct connectiontable {
	ip_address sourceaddress;
	ip_address destaddress;
	u_short sourceport;
	u_short destport;
	char timestr_start[16];


}connectiontable;

// TCP header
typedef struct tcp_header
{
	unsigned short source_port; // source port
	unsigned short dest_port; // destination port
	unsigned int sequence; // sequence number - 32 bits
	unsigned int acknowledge; // acknowledgement number - 32 bits

	unsigned char ns : 1;
	unsigned char reserved_part1 : 3;
	unsigned char data_offset : 4;

	unsigned char fin : 1; //Finish Flag
	unsigned char syn : 1; //Synchronise Flag
	unsigned char rst : 1; //Reset Flag
	unsigned char psh : 1; //Push Flag
	unsigned char ack : 1; //Acknowledgement Flag
	unsigned char urg : 1; //Urgent Flag

	unsigned char ecn : 1; //ECN-Echo Flag
	unsigned char cwr : 1; //Congestion Window Reduced Flag

						   ////////////////////////////////

	unsigned short window; // window
	unsigned short checksum; // checksum
	unsigned short urgent_pointer; // urgent pointer
} TCP_HDR;


/* prototype of the packet handler */
void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data);
bool compareaddress(ip_address a, ip_address b);
using namespace std;


fstream outfile("E:/sniffer.txt");
vector <connectiontable *> tableptr;
connectiontable tb;
pcap_dumper_t *dumpfile;
char *filename = "myfile";

int main()
{
	pcap_if_t *alldevs;
	pcap_if_t *d;
	int inum;
	int i = 0;
	pcap_t *adhandle;
	char errbuf[PCAP_ERRBUF_SIZE];
	u_int netmask;
	char packet_filter[] = "tcp";
	struct bpf_program fcode;





	/* Retrieve the device list */
	if (pcap_findalldevs_ex(PCAP_SRC_IF_STRING, NULL, &alldevs, errbuf) == -1)
	{
		fprintf(stderr, "Error in pcap_findalldevs: %s\n", errbuf);
		exit(1);
	}

	/* Print the list */
	for (d = alldevs; d; d = d->next)
	{
		printf("%d. %s", ++i, d->name);
		if (d->description)
			printf(" (%s)\n", d->description);
		else
			printf(" (No description available)\n");
	}

	if (i == 0)
	{
		printf("\nNo interfaces found! Make sure WinPcap is installed.\n");
		return -1;
	}

	printf("Enter the interface number (1-%d):", i);
	scanf_s("%d", &inum);

	if (inum < 1 || inum > i)
	{
		printf("\nInterface number out of range.\n");
		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}

	/* Jump to the selected adapter */
	for (d = alldevs, i = 0; i< inum - 1;d = d->next, i++);

	/* Open the adapter */
	if ((adhandle = pcap_open(d->name,
		65536,
		PCAP_OPENFLAG_PROMISCUOUS,
		1000,
		NULL,
		errbuf
		)) == NULL)
	{
		fprintf(stderr, "\nUnable to open the adapter. %s is not supported by WinPcap\n");
		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}

	/* Open the dump file */
	dumpfile = pcap_dump_open(adhandle, filename);

	if (dumpfile == NULL)
	{
		fprintf(stderr, "\nError opening output file\n");
		return -1;
	}

	/* Check the link layer. We support only Ethernet for simplicity. */
	if (pcap_datalink(adhandle) != DLT_EN10MB)
	{
		fprintf(stderr, "\nThis program works only on Ethernet networks.\n");
		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}

	if (d->addresses != NULL)
		/* Retrieve the mask of the first address of the interface */
		netmask = ((struct sockaddr_in *)(d->addresses->netmask))->sin_addr.S_un.S_addr;
	else
		/* If the interface is without addresses we suppose to be in a C class network */
		netmask = 0xffffff;


	//compile the filter
	if (pcap_compile(adhandle, &fcode, packet_filter, 1, netmask) <0)
	{
		fprintf(stderr, "\nUnable to compile the packet filter. Check the syntax.\n");
		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}

	//set the filter
	if (pcap_setfilter(adhandle, &fcode)<0)
	{
		fprintf(stderr, "\nError setting the filter.\n");
		/* Free the device list */
		pcap_freealldevs(alldevs);
		return -1;
	}

	printf("\nlistening on %s...\n", d->description);

	pcap_freealldevs(alldevs);




	/* start the capture */
	pcap_loop(adhandle, 0, packet_handler, (unsigned char *)dumpfile);


	return 0;
}

/* Callback function invoked by libpcap for every incoming packet */
void packet_handler(u_char *dumpfile, const struct pcap_pkthdr *header, const u_char *pkt_data)
{


	/* save the packet on the dump file */
	pcap_dump(dumpfile, header, pkt_data);

	struct tm ltime;
	char timestr[16];
	ip_header *ih;
	udp_header *uh;
	TCP_HDR * tc;
	u_int ip_len;
	u_short sport, dport;
	time_t local_tv_sec;


	/* convert the timestamp to readable format */
	local_tv_sec = header->ts.tv_sec;
	localtime_s(&ltime, &local_tv_sec);
	strftime(timestr, sizeof timestr, "%H:%M:%S", &ltime);



	ih = (ip_header *)(pkt_data +
		14); //length of ethernet header

			 /* retireve the position of the udp header */
	ip_len = (ih->ver_ihl & 0xf) * 4;
	tc = (TCP_HDR *)((u_char*)ih + ip_len);

	sport = ntohs(tc->source_port);
	dport = ntohs(tc->dest_port);
	/*
	* Unused variable
	*/
	//(VOID)(param);



	/* print timestamp and length of the packet */
	printf("\n %s.%.6d len:%d ", timestr, header->ts.tv_usec, header->len);

	/* retireve the position of the ip header */

	/* convert from network byte order to host byte order */
	int flag = false;

	if ((unsigned int)tc->syn == 1)
	{
		for (int i = 0;i < tableptr.size();i++)
		{
			if (compareaddress(tableptr[i]->sourceaddress, ih->saddr) == true)
			{
				flag = true;
			}
		}
		if (flag == false)
		{
			tb.sourceaddress = ih->saddr;
			tb.destaddress = ih->daddr;
			tb.sourceport = tc->source_port;
			tb.destport = tc->dest_port;
			strcpy_s(tb.timestr_start, timestr);

			tableptr.push_back(new connectiontable(tb));

		}
	}
	if ((unsigned int)tc->fin == 1)
	{

		for (int i = 0;i < tableptr.size();i++)
		{
			printf("\n*******************************\n");
			if (compareaddress(tableptr[i]->sourceaddress, ih->saddr) /*&& compareaddress(tableptr[i]->destaddress, ih->daddr) && (tableptr[i]->sourceport == tc->source_port) && (tableptr[i]->destport == tc->dest_port)*/)
			{
				printf("\n %d.%d.%d.%d.%d -> %d.%d.%d.%d.%d ,start at : %s has been terminated at : %s\n",
					ih->saddr.byte1,
					ih->saddr.byte2,
					ih->saddr.byte3,
					ih->saddr.byte4,
					sport,
					ih->daddr.byte1,
					ih->daddr.byte2,
					ih->daddr.byte3,
					ih->daddr.byte4,
					dport, tableptr[i]->timestr_start, timestr);
			}

			else if (compareaddress(tableptr[i]->sourceaddress, ih->daddr) /*&& compareaddress(tableptr[i]->destaddress, ih->saddr) && (tableptr[i]->sourceport == tc->dest_port) && (tableptr[i]->destport == tc->source_port)*/)
			{
				printf("\n %d.%d.%d.%d.%d -> %d.%d.%d.%d.%d ,start at : %s has been terminated at : %s\n",
					ih->saddr.byte1,
					ih->saddr.byte2,
					ih->saddr.byte3,
					ih->saddr.byte4,
					sport,
					ih->daddr.byte1,
					ih->daddr.byte2,
					ih->daddr.byte3,
					ih->daddr.byte4,
					dport, tableptr[i]->timestr_start, timestr);
			}

		}
	}



		printf("\n %d.%d.%d.%d.%d -> %d.%d.%d.%d.%d ,tcp->syn =%d  , tcp->fin=%d \n",
			ih->saddr.byte1,
			ih->saddr.byte2,
			ih->saddr.byte3,
			ih->saddr.byte4,
			sport,
			ih->daddr.byte1,
			ih->daddr.byte2,
			ih->daddr.byte3,
			ih->daddr.byte4,
			dport, tc->syn, tc->fin);






}


bool compareaddress(ip_address a, ip_address b)
{
	if ((unsigned int)a.byte1 == (unsigned int)b.byte1 && (unsigned int)a.byte2 == (unsigned int)b.byte2 && (unsigned int)a.byte3 == (unsigned int)b.byte3 && (unsigned int)a.byte4 == (unsigned int)b.byte4)
		return true;
	else
		return false;
}

